[{"id": "encode", "parent": "#", "text": "encode", "type": "default"}, {"id": "encode/bash", "parent": "encode", "text": "bash", "type": "default"}, {"id": "encode/python", "parent": "encode", "text": "python", "type": "default"}, {"id": "format", "parent": "#", "text": "format", "type": "default"}, {"id": "format/bash", "parent": "format", "text": "bash", "type": "default"}, {"id": "format/python", "parent": "format", "text": "python", "type": "default"}, {"id": "lets/encode/bash/base64_", "parent": "encode/bash", "text": "base64", "type": "module", "help": "usage: encode/bash/base64 [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL]\n\n    Base64 encode a bash script into a bash command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (/bin/bash)\n"}, {"id": "lets/encode/bash/compress_", "parent": "encode/bash", "text": "compress", "type": "module", "help": "usage: encode/bash/compress [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL]\n\n    Compress and Base64 encode a bash script into a bash command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (/bin/bash)\n"}, {"id": "lets/encode/python/base64_", "parent": "encode/python", "text": "base64", "type": "module", "help": "usage: encode/python/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Base64 encode a python script into a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/python/compress_", "parent": "encode/python", "text": "compress", "type": "module", "help": "usage: encode/python/compress [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Compress and Base64 encode a python script into a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/python/rc4_", "parent": "encode/python", "text": "rc4", "type": "module", "help": "usage: encode/python/rc4 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Compress, RC4 encrypt and Base64 encode a python script into a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/format/bash/python_", "parent": "format/bash", "text": "python", "type": "module", "help": "usage: format/bash/python [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL]\n\n    Base64 encode a bash command and wrap it in a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (/bin/bash)\n"}, {"id": "lets/format/python/bash_", "parent": "format/python", "text": "bash", "type": "module", "help": "usage: format/python/bash [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL] [-c]\n\n    Base64 encode a python command and wrap it in a bash command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (python)\n  -c, --compress        use compression\n"}, {"id": "lets/proxy/forward/zap/http_", "parent": "proxy/forward/zap", "text": "http", "type": "module", "help": "usage: proxy/forward/zap/http [-h] [-i] [-g] [-o OUTPUT] [-v]\n                              [--interface INTERFACE] [-p PORT] [-c CA]\n                              [--proxy PROXY]\n\n    Proxy HTTP traffic through the OWASP Zed Attack Proxy (ZAP) and inject the heads-up display (HUD).\n\n    To use:\n    1) Generate a certificate authority (CA)\n    2) Start ZAP with the CA\n    3) Import CA into browser (Chromium works well)\n    4) Configure browser to use ZAP as HTTP/HTTPS proxy\n    5) Browse with ZAP heads-up-display (HUD)\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  --interface INTERFACE\n                        interface to listen on\n  -p PORT, --port PORT  port to listen on\n  -c CA, --ca CA        provide certificate authority\n  --proxy PROXY         use upstream HTTP proxy\n"}, {"id": "lets/scan/http/sqlmap/crawl_", "parent": "scan/http/sqlmap", "text": "crawl", "type": "module", "help": "usage: scan/http/sqlmap/crawl [-h] [-i] [-g] [-o OUTPUT] [-v] [-d DEPTH]\n                              [-c COOKIE] [-p PROXY] [-q] [--delay DELAY]\n                              [--timeout TIMEOUT] [--useragent USERAGENT]\n                              [--default] [--check-tor]\n\n    Crawl an HTTP resource for SQL injection vulnerabilities.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -d DEPTH, --depth DEPTH\n                        crawl depth\n  -c COOKIE, --cookie COOKIE\n                        use specific cookie value\n  -p PROXY, --proxy PROXY\n                        use a proxy to connect\n  -q, --quiet           limit network activity\n  --delay DELAY         delay in seconds between each HTTP request\n  --timeout TIMEOUT     seconds to wait before timeout connection (30)\n  --useragent USERAGENT\n                        use specific useragent\n  --default             use defaults\n  --check-tor           if proxy is tor, confirm it is working properly\n"}, {"id": "lets/scan/http/sqlmap/request_", "parent": "scan/http/sqlmap", "text": "request", "type": "module", "help": "usage: scan/http/sqlmap/request [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PROXY]\n                                [-q] [--delay DELAY] [--timeout TIMEOUT]\n                                [--useragent USERAGENT] [--default]\n                                [--check-tor]\n\n    Scan an HTTP resource for SQL injection according to the provided request template.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PROXY, --proxy PROXY\n                        use a proxy to connect\n  -q, --quiet           limit network activity\n  --delay DELAY         delay in seconds between each HTTP request\n  --timeout TIMEOUT     seconds to wait before timeout connection (30)\n  --useragent USERAGENT\n                        use specific useragent\n  --default             use defaults\n  --check-tor           if proxy is tor, confirm it is working properly\n"}, {"id": "lets/scan/http/sqlmap/url_", "parent": "scan/http/sqlmap", "text": "url", "type": "module", "help": "usage: scan/http/sqlmap/url [-h] [-i] [-g] [-o OUTPUT] [-v] [-m METHOD]\n                            [-d DATA] [-c COOKIE] [-p PROXY] [-q]\n                            [--delay DELAY] [--timeout TIMEOUT]\n                            [--useragent USERAGENT] [--default] [--check-tor]\n\n    Scan an HTTP resource for SQL injection according to the provided URL.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -m METHOD, --method METHOD\n                        use specific method\n  -d DATA, --data DATA  use specific data\n  -c COOKIE, --cookie COOKIE\n                        use specific cookie value\n  -p PROXY, --proxy PROXY\n                        use a proxy to connect\n  -q, --quiet           limit network activity\n  --delay DELAY         delay in seconds between each HTTP request\n  --timeout TIMEOUT     seconds to wait before timeout connection (30)\n  --useragent USERAGENT\n                        use specific useragent\n  --default             use defaults\n  --check-tor           if proxy is tor, confirm it is working properly\n"}, {"id": "lets/scan/http/version_", "parent": "scan/http", "text": "version", "type": "module", "help": "usage: scan/http/version [-h] [-i] [-g] [-o OUTPUT] [-v] [-u USERAGENT]\n                         [-a AUTH] [-c COOKIE] [-p PROXY]\n\n    Scan an HTTP endpoint and determine its software version (provide HTTP endpoints as input).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -u USERAGENT, --useragent USERAGENT\n                        use specific useragent\n  -a AUTH, --auth AUTH  use HTTP basic authentication (user:password)\n  -c COOKIE, --cookie COOKIE\n                        use specific cookies (name=value; name2=value2)\n  -p PROXY, --proxy PROXY\n                        use HTTP proxy to connect to target (ip:port)\n"}, {"id": "proxy", "parent": "#", "text": "proxy", "type": "default"}, {"id": "proxy/forward", "parent": "proxy", "text": "forward", "type": "default"}, {"id": "proxy/forward/zap", "parent": "proxy/forward", "text": "zap", "type": "default"}, {"id": "scan", "parent": "#", "text": "scan", "type": "default"}, {"id": "scan/http", "parent": "scan", "text": "http", "type": "default"}, {"id": "scan/http/sqlmap", "parent": "scan/http", "text": "sqlmap", "type": "default"}]
