[{"id": "encode", "parent": "#", "text": "encode", "type": "default"}, {"id": "encode/bash", "parent": "encode", "text": "bash", "type": "default"}, {"id": "encode/js", "parent": "encode", "text": "js", "type": "default"}, {"id": "encode/jscript", "parent": "encode", "text": "jscript", "type": "default"}, {"id": "encode/powershell", "parent": "encode", "text": "powershell", "type": "default"}, {"id": "encode/powershell/bypass", "parent": "encode/powershell", "text": "bypass", "type": "default"}, {"id": "encode/python", "parent": "encode", "text": "python", "type": "default"}, {"id": "encrypt", "parent": "#", "text": "encrypt", "type": "default"}, {"id": "format", "parent": "#", "text": "format", "type": "default"}, {"id": "format/bash", "parent": "format", "text": "bash", "type": "default"}, {"id": "format/doc", "parent": "format", "text": "doc", "type": "default"}, {"id": "format/exe", "parent": "format", "text": "exe", "type": "default"}, {"id": "format/hta", "parent": "format", "text": "hta", "type": "default"}, {"id": "format/jscript", "parent": "format", "text": "jscript", "type": "default"}, {"id": "format/linux", "parent": "format", "text": "linux", "type": "default"}, {"id": "format/linux/x64", "parent": "format/linux", "text": "x64", "type": "default"}, {"id": "format/linux/x64/pic", "parent": "format/linux/x64", "text": "pic", "type": "default"}, {"id": "format/linux/x86", "parent": "format/linux", "text": "x86", "type": "default"}, {"id": "format/linux/x86/pic", "parent": "format/linux/x86", "text": "pic", "type": "default"}, {"id": "format/ppt", "parent": "format", "text": "ppt", "type": "default"}, {"id": "format/python", "parent": "format", "text": "python", "type": "default"}, {"id": "format/slk", "parent": "format", "text": "slk", "type": "default"}, {"id": "format/vbs", "parent": "format", "text": "vbs", "type": "default"}, {"id": "format/windows", "parent": "format", "text": "windows", "type": "default"}, {"id": "format/windows/assembly", "parent": "format/windows", "text": "assembly", "type": "default"}, {"id": "format/windows/x64", "parent": "format/windows", "text": "x64", "type": "default"}, {"id": "format/windows/x64/assembly", "parent": "format/windows/x64", "text": "assembly", "type": "default"}, {"id": "format/windows/x64/dll", "parent": "format/windows/x64", "text": "dll", "type": "default"}, {"id": "format/windows/x64/exe", "parent": "format/windows/x64", "text": "exe", "type": "default"}, {"id": "format/windows/x64/pic", "parent": "format/windows/x64", "text": "pic", "type": "default"}, {"id": "format/windows/x86", "parent": "format/windows", "text": "x86", "type": "default"}, {"id": "format/windows/x86/assembly", "parent": "format/windows/x86", "text": "assembly", "type": "default"}, {"id": "format/windows/x86/dll", "parent": "format/windows/x86", "text": "dll", "type": "default"}, {"id": "format/windows/x86/exe", "parent": "format/windows/x86", "text": "exe", "type": "default"}, {"id": "format/windows/x86/pic", "parent": "format/windows/x86", "text": "pic", "type": "default"}, {"id": "format/wsf", "parent": "format", "text": "wsf", "type": "default"}, {"id": "format/xll", "parent": "format", "text": "xll", "type": "default"}, {"id": "format/xls", "parent": "format", "text": "xls", "type": "default"}, {"id": "generate", "parent": "#", "text": "generate", "type": "default"}, {"id": "generate/payload", "parent": "generate", "text": "payload", "type": "default"}, {"id": "generate/payload/cmd", "parent": "generate/payload", "text": "cmd", "type": "default"}, {"id": "generate/payload/powershell", "parent": "generate/payload", "text": "powershell", "type": "default"}, {"id": "launch", "parent": "#", "text": "launch", "type": "default"}, {"id": "launch/c2", "parent": "launch", "text": "c2", "type": "default"}, {"id": "lets/encode/bash/base64_", "parent": "encode/bash", "text": "base64", "type": "module", "help": "usage: encode/bash/base64 [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL]\n\n    Base64 encode a bash script into a bash command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (/bin/bash)\n"}, {"id": "lets/encode/bash/compress_", "parent": "encode/bash", "text": "compress", "type": "module", "help": "usage: encode/bash/compress [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL]\n\n    Compress and Base64 encode a bash script into a bash command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (/bin/bash)\n"}, {"id": "lets/encode/js/obfuscate_", "parent": "encode/js", "text": "obfuscate", "type": "module", "help": "usage: encode/js/obfuscate [-h] [-i] [-g] [-o OUTPUT] [-v] [-r] [-e]\n                           [-s SPLIT] [-p]\n\n    Obfuscate the supplied javascript.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -r, --rename          rename variables\n  -e, --encrypt         encrypt strings\n  -s SPLIT, --split SPLIT\n                        split strings at length\n  -p, --pretty          don't minimize output\n"}, {"id": "lets/encode/jscript/rc4_", "parent": "encode/jscript", "text": "rc4", "type": "module", "help": "usage: encode/jscript/rc4 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    RC4 and Base64 encode JScript and wrap in a decode stub.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/powershell/base64_", "parent": "encode/powershell", "text": "base64", "type": "module", "help": "usage: encode/powershell/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Base64 encode a PowerShell script and wrap it in a decode stub.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/powershell/bypass/standard_", "parent": "encode/powershell/bypass", "text": "standard", "type": "module", "help": "usage: encode/powershell/bypass/standard [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Wrap a PowerShell script with standard AMSI and ScriptBlock Logging bypasses.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/powershell/compress_", "parent": "encode/powershell", "text": "compress", "type": "module", "help": "usage: encode/powershell/compress [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Compress and base64 encode a PowerShell script and wrap it in a decompression stub.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/powershell/obfuscate_", "parent": "encode/powershell", "text": "obfuscate", "type": "module", "help": "usage: encode/powershell/obfuscate [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Obfuscate a powershell script with various string replacements.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/python/base64_", "parent": "encode/python", "text": "base64", "type": "module", "help": "usage: encode/python/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Base64 encode a python script into a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/python/compress_", "parent": "encode/python", "text": "compress", "type": "module", "help": "usage: encode/python/compress [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Compress and Base64 encode a python script into a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/python/rc4_", "parent": "encode/python", "text": "rc4", "type": "module", "help": "usage: encode/python/rc4 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Compress, RC4 encrypt and Base64 encode a python script into a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encrypt/rc4_", "parent": "encrypt", "text": "rc4", "type": "module", "help": "usage: encrypt/rc4 [-h] [-i] [-g] [-o OUTPUT] [-v] [-k KEY]\n\n    RC4 encrypt the supplied data.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -k KEY, --key KEY     encryption key\n"}, {"id": "lets/format/bash/python_", "parent": "format/bash", "text": "python", "type": "module", "help": "usage: format/bash/python [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL]\n\n    Base64 encode a bash command and wrap it in a python command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (/bin/bash)\n"}, {"id": "lets/format/doc/js_", "parent": "format/doc", "text": "js", "type": "module", "help": "usage: format/doc/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Microsoft Word Document (.doc, docx, .docm) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the document (test.doc)\n  -t TYPE, --type TYPE  mimetype of download (application/msword)\n"}, {"id": "lets/format/exe/js_", "parent": "format/exe", "text": "js", "type": "module", "help": "usage: format/exe/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap an executable file as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the executable (test.exe)\n  -t TYPE, --type TYPE  mimetype of download (application/octet-stream)\n"}, {"id": "lets/format/hta/js_", "parent": "format/hta", "text": "js", "type": "module", "help": "usage: format/hta/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a HTML Application (.hta) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the script (test.hta)\n  -t TYPE, --type TYPE  mimetype of download (application/hta)\n"}, {"id": "lets/format/jscript/js_", "parent": "format/jscript", "text": "js", "type": "module", "help": "usage: format/jscript/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a JScript script (.js, .jse) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the script (test.js)\n  -t TYPE, --type TYPE  mimetype of download (application/js)\n"}, {"id": "lets/format/linux/x64/pic/python_", "parent": "format/linux/x64/pic", "text": "python", "type": "module", "help": "usage: format/linux/x64/pic/python [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Format Linux x64 position-independent code (PIC) into python.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/format/linux/x86/pic/python_", "parent": "format/linux/x86/pic", "text": "python", "type": "module", "help": "usage: format/linux/x86/pic/python [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Format Linux x86 position-independent code (PIC) into python.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/format/ppt/js_", "parent": "format/ppt", "text": "js", "type": "module", "help": "usage: format/ppt/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Microsoft PowerPoint Document (.ppt, pps, .ppsx) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the document (test.ppt)\n  -t TYPE, --type TYPE  mimetype of download (application/ms-powerpoint)\n"}, {"id": "lets/format/python/bash_", "parent": "format/python", "text": "bash", "type": "module", "help": "usage: format/python/bash [-h] [-i] [-g] [-o OUTPUT] [-v] [-s SHELL] [-c]\n\n    Base64 encode a python command and wrap it in a bash command.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -s SHELL, --shell SHELL\n                        use a specific shell (python)\n  -c, --compress        use compression\n"}, {"id": "lets/format/slk/js_", "parent": "format/slk", "text": "js", "type": "module", "help": "usage: format/slk/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Symbolic Link spreadsheet (.slk) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the document (test.slk)\n  -t TYPE, --type TYPE  mimetype of download (application/ms-excel)\n"}, {"id": "lets/format/vbs/js_", "parent": "format/vbs", "text": "js", "type": "module", "help": "usage: format/vbs/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Visual Basic Script (.vbs, .vbe) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the script (test.vbs)\n  -t TYPE, --type TYPE  mimetype of download (application/x-vbs)\n"}, {"id": "lets/format/windows/assembly/pic_", "parent": "format/windows/assembly", "text": "pic", "type": "module", "help": "usage: format/windows/assembly/pic [-h] [-i] [-g] [-o OUTPUT] [-v] [-c CLS]\n                                   [-m METHOD] [-p PARAMETER] [-a {x86,x64}]\n                                   [-r RUNTIME] [-b] [-z]\n                                   [-x {thread,process}]\n\n    Wrap the supplied Windows .NET assembly as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c CLS, --class CLS   Class to invoke\n  -m METHOD, --method METHOD\n                        Method to invoke\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -a {x86,x64}, --architecture {x86,x64}\n                        Specify target architecture\n  -r RUNTIME, --runtime RUNTIME\n                        Specify CLR runtime version\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/assembly/powershell_", "parent": "format/windows/assembly", "text": "powershell", "type": "module", "help": "usage: format/windows/assembly/powershell [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                          [-c CLS] [-m MTH] [-a ARGS]\n\n    Format a Windows .NET assembly as a PowerShell script.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c CLS, --class CLS   class to invoke\n  -m MTH, --method MTH  method to invoke\n  -a ARGS, --argument ARGS\n                        argument(s) to provide invocation\n"}, {"id": "lets/format/windows/x64/assembly/pic_", "parent": "format/windows/x64/assembly", "text": "pic", "type": "module", "help": "usage: format/windows/x64/assembly/pic [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                       [-c CLS] [-m METHOD] [-p PARAMETER]\n                                       [-r RUNTIME] [-b] [-z]\n                                       [-x {thread,process}]\n\n    Wrap the supplied Windows x64 .NET assembly as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c CLS, --class CLS   Class to invoke\n  -m METHOD, --method METHOD\n                        Method to invoke\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -r RUNTIME, --runtime RUNTIME\n                        Specify CLR runtime version\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/x64/dll/pic_", "parent": "format/windows/x64/dll", "text": "pic", "type": "module", "help": "usage: format/windows/x64/dll/pic [-h] [-i] [-g] [-o OUTPUT] [-v] [-m METHOD]\n                                  [-p PARAMETER] [-b] [-z]\n                                  [-x {thread,process}]\n\n    Wrap the supplied Windows x64 DLL as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -m METHOD, --method METHOD\n                        Method to invoke\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/x64/exe/pic_", "parent": "format/windows/x64/exe", "text": "pic", "type": "module", "help": "usage: format/windows/x64/exe/pic [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                  [-p PARAMETER] [-b] [-z]\n                                  [-x {thread,process}]\n\n    Wrap the supplied Windows x64 EXE as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/x64/pic/powershell_", "parent": "format/windows/x64/pic", "text": "powershell", "type": "module", "help": "usage: format/windows/x64/pic/powershell [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Format Windows x64 position-independent code (PIC) into PowerShell.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/format/windows/x86/assembly/pic_", "parent": "format/windows/x86/assembly", "text": "pic", "type": "module", "help": "usage: format/windows/x86/assembly/pic [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                       [-c CLS] [-m METHOD] [-p PARAMETER]\n                                       [-r RUNTIME] [-b] [-z]\n                                       [-x {thread,process}]\n\n    Wrap the supplied Windows x86 .NET assembly as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c CLS, --class CLS   Class to invoke\n  -m METHOD, --method METHOD\n                        Method to invoke\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -r RUNTIME, --runtime RUNTIME\n                        Specify CLR runtime version\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/x86/dll/pic_", "parent": "format/windows/x86/dll", "text": "pic", "type": "module", "help": "usage: format/windows/x86/dll/pic [-h] [-i] [-g] [-o OUTPUT] [-v] [-m METHOD]\n                                  [-p PARAMETER] [-b] [-z]\n                                  [-x {thread,process}]\n\n    Wrap the supplied Windows x86 DLL as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -m METHOD, --method METHOD\n                        Method to invoke\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/x86/exe/pic_", "parent": "format/windows/x86/exe", "text": "pic", "type": "module", "help": "usage: format/windows/x86/exe/pic [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                  [-p PARAMETER] [-b] [-z]\n                                  [-x {thread,process}]\n\n    Wrap the supplied Windows x86 EXE as position-independent code (PIC).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PARAMETER, --parameter PARAMETER\n                        Parameter(s) to supply invocation\n  -b, --bypass          Bypass AMSI/WLDP\n  -z, --compress        Use compression\n  -x {thread,process}, --exit {thread,process}\n                        Exit procedure (thread)\n"}, {"id": "lets/format/windows/x86/pic/powershell_", "parent": "format/windows/x86/pic", "text": "powershell", "type": "module", "help": "usage: format/windows/x86/pic/powershell [-h] [-i] [-g] [-o OUTPUT] [-v]\n\n    Format Windows x86 position-independent code (PIC) into PowerShell.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/format/wsf/js_", "parent": "format/wsf", "text": "js", "type": "module", "help": "usage: format/wsf/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Windows Script File (.wsf) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the file (test.wsf)\n  -t TYPE, --type TYPE  mimetype of download (text/xml)\n"}, {"id": "lets/format/xll/js_", "parent": "format/xll", "text": "js", "type": "module", "help": "usage: format/xll/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Microsoft Excel Add-in (.xll) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the document (test.xll)\n  -t TYPE, --type TYPE  mimetype of download (application/ms-excel)\n"}, {"id": "lets/format/xls/js_", "parent": "format/xls", "text": "js", "type": "module", "help": "usage: format/xls/js [-h] [-i] [-g] [-o OUTPUT] [-v] [-n NAME] [-t TYPE]\n\n    Wrap a Microsoft Excel Document (.xls, xlsx, .xlsm) as JavaScript using HTML smuggling.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -n NAME, --name NAME  name of the document (test.xls)\n  -t TYPE, --type TYPE  mimetype of download (application/ms-excel)\n"}, {"id": "lets/generate/payload/cmd/dnsdropper_", "parent": "generate/payload/cmd", "text": "dnsdropper", "type": "module", "help": "usage: generate/payload/cmd/dnsdropper [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                       [-a ADDRESS]\n                                       domain path\n\n    Download a payload over DNS using nslookup and certutil.\n\n    NOTE: Uses modified PowerDNS syntax, so text records\n    should be base64 encoded, but not gzipped.\n    \n\npositional arguments:\n  domain                domain name\n  path                  download location\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -a ADDRESS, --address ADDRESS\n                        address of domain server\n"}, {"id": "lets/generate/payload/cmd/webdropper_", "parent": "generate/payload/cmd", "text": "webdropper", "type": "module", "help": "usage: generate/payload/cmd/webdropper [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                       [-j JOB]\n                                       url path\n\n    Download a web resource using bitsadmin and certutil.\n\n    NOTE: The web resource must be base64 encoded!\n    \n\npositional arguments:\n  url                   url of web resource\n  path                  download location\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -j JOB, --job JOB     name of transfer job (test)\n"}, {"id": "lets/generate/payload/msfvenom_", "parent": "generate/payload", "text": "msfvenom", "type": "module", "help": "usage: generate/payload/msfvenom [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                 [-a ARCHITECTURE] [--platform PLATFORM]\n                                 [-p PAYLOAD] [-f FORMAT]\n                                 [opts [opts ...]]\n\n    Generate Metasploit payloads with msvenom.\n    \n\npositional arguments:\n  opts                  specify payload options (KEY=VALUE)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -a ARCHITECTURE, --architecture ARCHITECTURE\n                        specify payload architecture\n  --platform PLATFORM   specify payload platform\n  -p PAYLOAD, --payload PAYLOAD\n                        specify payload\n  -f FORMAT, --format FORMAT\n                        specify payload format\n"}, {"id": "lets/generate/payload/powershell/dnsloader_", "parent": "generate/payload/powershell", "text": "dnsloader", "type": "module", "help": "usage: generate/payload/powershell/dnsloader [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                             [-a ADDRESS] [-z]\n                                             domain\n\n    Generate a PowerShell script that executes further PowerShell code\n    from a stream of DNS TXT records (modified PowerDNS).\n    \n\npositional arguments:\n  domain                domain name\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -a ADDRESS, --address ADDRESS\n                        address of domain server\n  -z, --decompress      payload is gzipped\n"}, {"id": "lets/generate/payload/powershell/webloader_", "parent": "generate/payload/powershell", "text": "webloader", "type": "module", "help": "usage: generate/payload/powershell/webloader [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                             url\n\n    Generate a PowerShell script that executes further PowerShell code\n    from a web resource.\n    \n\npositional arguments:\n  url                   url of web resource\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/generate/payload/powershell/webloader_ie_", "parent": "generate/payload/powershell", "text": "webloader_ie", "type": "module", "help": "usage: generate/payload/powershell/webloader_ie [-h] [-i] [-g] [-o OUTPUT]\n                                                [-v] [-z]\n                                                [url]\n\n    Generate a PowerShell script that executes further PowerShell code\n    from a web resource using an Internet Explorer COM object.\n\n    NOTE: Web resource must be wrapped in `<html><body>[DATA]</body></html>`\n    \n\npositional arguments:\n  url                   url of web resource\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -z, --decompress      payload is gzipped\n"}, {"id": "lets/launch/c2/metasploit_", "parent": "launch/c2", "text": "metasploit", "type": "module", "help": "usage: launch/c2/metasploit [-h] [-i] [-g] [-o OUTPUT] [-v] [-d DIRECTORY]\n\n    Launch the Metasploit console.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -d DIRECTORY, --directory DIRECTORY\n                        share a directory\n"}, {"id": "lets/listen/stage/powerdns_", "parent": "listen/stage", "text": "powerdns", "type": "module", "help": "usage: listen/stage/powerdns [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PORT]\n                             [--interface INTERFACE] [-z] [-u UPSTREAM]\n                             domain\n\n    Stage a payload over DNS TXT records using a modified version\n    of MDSec's PowerDNS technique.\n\n    Modification: 0th record returns length, not powershell payload\n    \n\npositional arguments:\n  domain                stage under domain\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PORT, --port PORT  listen on port (53)\n  --interface INTERFACE\n                        listen on interface (0.0.0.0)\n  -z, --compress        gzip payload\n  -u UPSTREAM, --upstream UPSTREAM\n                        forward requests to upstream DNS servers\n"}, {"id": "lets/proxy/forward/zap/http_", "parent": "proxy/forward/zap", "text": "http", "type": "module", "help": "usage: proxy/forward/zap/http [-h] [-i] [-g] [-o OUTPUT] [-v]\n                              [--interface INTERFACE] [-p PORT] [-c CA]\n                              [--proxy PROXY]\n\n    Proxy HTTP traffic through the OWASP Zed Attack Proxy (ZAP) and inject the heads-up display (HUD).\n\n    To use:\n    1) Generate a certificate authority (CA)\n    2) Start ZAP with the CA\n    3) Import CA into browser (Chromium works well)\n    4) Configure browser to use ZAP as HTTP/HTTPS proxy\n    5) Browse with ZAP heads-up-display (HUD)\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  --interface INTERFACE\n                        interface to listen on\n  -p PORT, --port PORT  port to listen on\n  -c CA, --ca CA        provide certificate authority\n  --proxy PROXY         use upstream HTTP proxy\n"}, {"id": "lets/scan/http/sqlmap/crawl_", "parent": "scan/http/sqlmap", "text": "crawl", "type": "module", "help": "usage: scan/http/sqlmap/crawl [-h] [-i] [-g] [-o OUTPUT] [-v] [-d DEPTH]\n                              [-c COOKIE] [-p PROXY] [-q] [--delay DELAY]\n                              [--timeout TIMEOUT] [--useragent USERAGENT]\n                              [--default] [--check-tor]\n\n    Crawl an HTTP resource for SQL injection vulnerabilities.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -d DEPTH, --depth DEPTH\n                        crawl depth\n  -c COOKIE, --cookie COOKIE\n                        use specific cookie value\n  -p PROXY, --proxy PROXY\n                        use a proxy to connect\n  -q, --quiet           limit network activity\n  --delay DELAY         delay in seconds between each HTTP request\n  --timeout TIMEOUT     seconds to wait before timeout connection (30)\n  --useragent USERAGENT\n                        use specific useragent\n  --default             use defaults\n  --check-tor           if proxy is tor, confirm it is working properly\n"}, {"id": "lets/scan/http/sqlmap/request_", "parent": "scan/http/sqlmap", "text": "request", "type": "module", "help": "usage: scan/http/sqlmap/request [-h] [-i] [-g] [-o OUTPUT] [-v] [-p PROXY]\n                                [-q] [--delay DELAY] [--timeout TIMEOUT]\n                                [--useragent USERAGENT] [--default]\n                                [--check-tor]\n\n    Scan an HTTP resource for SQL injection according to the provided request template.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -p PROXY, --proxy PROXY\n                        use a proxy to connect\n  -q, --quiet           limit network activity\n  --delay DELAY         delay in seconds between each HTTP request\n  --timeout TIMEOUT     seconds to wait before timeout connection (30)\n  --useragent USERAGENT\n                        use specific useragent\n  --default             use defaults\n  --check-tor           if proxy is tor, confirm it is working properly\n"}, {"id": "lets/scan/http/sqlmap/url_", "parent": "scan/http/sqlmap", "text": "url", "type": "module", "help": "usage: scan/http/sqlmap/url [-h] [-i] [-g] [-o OUTPUT] [-v] [-m METHOD]\n                            [-d DATA] [-c COOKIE] [-p PROXY] [-q]\n                            [--delay DELAY] [--timeout TIMEOUT]\n                            [--useragent USERAGENT] [--default] [--check-tor]\n\n    Scan an HTTP resource for SQL injection according to the provided URL.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -m METHOD, --method METHOD\n                        use specific method\n  -d DATA, --data DATA  use specific data\n  -c COOKIE, --cookie COOKIE\n                        use specific cookie value\n  -p PROXY, --proxy PROXY\n                        use a proxy to connect\n  -q, --quiet           limit network activity\n  --delay DELAY         delay in seconds between each HTTP request\n  --timeout TIMEOUT     seconds to wait before timeout connection (30)\n  --useragent USERAGENT\n                        use specific useragent\n  --default             use defaults\n  --check-tor           if proxy is tor, confirm it is working properly\n"}, {"id": "lets/scan/http/version_", "parent": "scan/http", "text": "version", "type": "module", "help": "usage: scan/http/version [-h] [-i] [-g] [-o OUTPUT] [-v] [-u USERAGENT]\n                         [-a AUTH] [-c COOKIE] [-p PROXY]\n\n    Scan an HTTP endpoint and determine its software version (provide HTTP endpoints as input).\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -u USERAGENT, --useragent USERAGENT\n                        use specific useragent\n  -a AUTH, --auth AUTH  use HTTP basic authentication (user:password)\n  -c COOKIE, --cookie COOKIE\n                        use specific cookies (name=value; name2=value2)\n  -p PROXY, --proxy PROXY\n                        use HTTP proxy to connect to target (ip:port)\n"}, {"id": "listen", "parent": "#", "text": "listen", "type": "default"}, {"id": "listen/stage", "parent": "listen", "text": "stage", "type": "default"}, {"id": "proxy", "parent": "#", "text": "proxy", "type": "default"}, {"id": "proxy/forward", "parent": "proxy", "text": "forward", "type": "default"}, {"id": "proxy/forward/zap", "parent": "proxy/forward", "text": "zap", "type": "default"}, {"id": "scan", "parent": "#", "text": "scan", "type": "default"}, {"id": "scan/http", "parent": "scan", "text": "http", "type": "default"}, {"id": "scan/http/sqlmap", "parent": "scan/http", "text": "sqlmap", "type": "default"}]
