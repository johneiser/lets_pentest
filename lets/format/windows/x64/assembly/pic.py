from lets.__module__ import Module


class PIC(Module):
    """
    Wrap the supplied Windows x64 .NET assembly as position-independent code (PIC).
    """
    images = [
        "local/donut:1.0.0",    # Cross-platform
        ]

    @classmethod
    def add_arguments(cls, parser):
        parser.add_argument("-c", "--class", dest="cls", type=str,
            help="Class to invoke")
        parser.add_argument("-m", "--method", type=str,
            help="Method to invoke")
        parser.add_argument("-p", "--parameter", type=str, action="append",
            help="Parameter(s) to supply invocation")
        parser.add_argument("-r", "--runtime", type=str,
            help="Specify CLR runtime version")
        parser.add_argument("-b", "--bypass", action="store_true",
            help="Bypass AMSI/WLDP")
        parser.add_argument("-z", "--compress", action="store_true",
            help="Use compression")
        parser.add_argument("-x", "--exit", type=str, choices=["thread", "process"],
            help="Exit procedure (thread)")

    def handle(self, input, cls=None, method=None, parameter=None, runtime=None, bypass=False, compress=False, exit=None):
        assert input is not None, "Must provide windows x64 .net assembly as input"

        # Call generic Windows PIC generator
        import lets.format.windows.assembly.pic as mod
        for data in mod.handle(input, cls, method, parameter, "x64", runtime, bypass, compress, exit):
            yield data
