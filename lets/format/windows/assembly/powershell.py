from lets.__module__ import Module
import base64


class PowerShell(Module):
    """
    Format a Windows .NET assembly as a PowerShell script.
    """

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("-c", "--class", dest="cls", type=str, required=True,
            help="class to invoke")
        parser.add_argument("-m", "--method", dest="mth", type=str, default="Main",
            help="method to invoke")
        parser.add_argument("-a", "--argument", dest="args", type=str, action="append",
            help="argument(s) to provide invocation")

    def handle(self, input, cls=None, mth="Main", args=None):
        assert input is not None, "Must provide .net assembly as input"

        for data in input:
            encoded = base64.b64encode(data).decode()

            # Decode assembly
            cmd  =  "$a=[System.Reflection.Assembly]::Load("
            cmd +=      "[System.Convert]::FromBase64String("
            cmd +=          "'%s'" % encoded
            cmd +=      ")"
            cmd +=  ");"

            # Instantiate assembly, class, and method
            cmd += "$c=$a.GetType('%s');" % cls
            cmd += "$m=$c.GetMethod('%s');" % mth
            cmd += "$o=[System.Activator]::CreateInstance($c);"
            cmd += "$m.Invoke($o,"

            # If method is 'Main', wrap arguments in string array 
            if mth.lower() == "main":
                cmd += "(,[System.String[]]"

            # Add arguments, if specified
            cmd += "@("
            if args:
                for i, arg in enumerate(args):

                    # Add array argument
                    if arg.startswith("[") and arg.endswith("]"):
                        parts = arg.strip("[]").split(",")
                        cmd += "[Object[]]@("
                        cmd += "%s" % (",".join(parts))
                        cmd += ")"

                    else:
                        # Add integer argument
                        try:
                            cmd += "%i" % int(arg)

                        # Add string argument
                        except ValueError:
                            cmd += "'%s'" % arg

                    if i < len(args)-1:
                        cmd += ","

            cmd += ")"

            if mth.lower() == "main":
                cmd += ")"

            cmd += ");"

            yield cmd.encode()
