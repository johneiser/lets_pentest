from lets.__module__ import Module, Container, TestCase
import base64


class Bash(Module):
    """
    Base64 encode a python command and wrap it in a bash command.
    """

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("-s", "--shell", type=str,
            help="use a specific shell (%(default)s)", default="python")
        parser.add_argument("-c", "--compress", action="store_true",
            help="choose to use compression")

    def handle(self, input, shell="python", compress=False):
        if compress:
            import lets.encode.bash.compress as encode
        else:
            import lets.encode.bash.base64 as encode
        
        for data in input:
            yield encode(data, shell=shell)


class BashTests(TestCase):
    images = ["python:2", "python:3"]

    def test_python_2(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print '%s'" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:2",
            network_disabled=True,
            entrypoint=["/bin/bash", "-c"],
            command=[cmd]) as container:
            
            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Bash execution produced inaccurate results")

    def test_python_3(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print('%s')" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:3",
            network_disabled=True,
            entrypoint=["/bin/bash", "-c"],
            command=[cmd]) as container:
            
            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Bash execution produced inaccurate results")

