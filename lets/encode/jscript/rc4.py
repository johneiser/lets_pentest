from lets.__module__ import Module
from Cryptodome.Cipher import ARC4
import os, base64


class RC4(Module):
    """
    RC4 and Base64 encode JScript and wrap in a decode stub.
    """

    @classmethod
    def add_arguments(self, parser):
        pass

    def handle(self, input):
        assert input is not None, "Must provide executable as input"

        # Retrieve data
        for data in input:
            cmd = ""

            # Generate key
            key = os.urandom(32)

            # Encrypt data with key
            self.log.debug("Encrypting %i bytes with key: 0x%s", len(data), key.hex())
            encrypted = ARC4.new(key).encrypt(data)

            # Define RC4 decryption
            cmd +=  "r=function(k,b){"
            cmd +=      "var s=[],j=0,x,o='';"
            cmd +=      "for(var i=0;i<256;i++){"
            cmd +=          "s[i]=i;"
            cmd +=      "};"
            cmd +=      "for(i=0;i<256;i++){"
            cmd +=          "j=(j+s[i]+k.charCodeAt(i%k.length))%256;"
            cmd +=          "x=s[i];"
            cmd +=          "s[i]=s[j];"
            cmd +=          "s[j]=x;"
            cmd +=      "};"
            cmd +=      "i=0;"
            cmd +=      "j=0;"
            cmd +=      "for(var y=0;y<b.length;y++){"
            cmd +=          "i=(i+1)%256;"
            cmd +=          "j=(j+s[i])%256;"
            cmd +=          "x=s[i];"
            cmd +=          "s[i]=s[j];"
            cmd +=          "s[j]=x;"
            cmd +=          "o+=String.fromCharCode(b.charCodeAt(y)^s[(s[i]+s[j])%256]);"
            cmd +=      "};"
            cmd +=      "return o;"
            cmd +=  "};"

            # Define Base64 decoding
            cmd +=  "d=function(s){"
            cmd +=      "var e={},i,b=0,c,x,l=0,a,r='',w=String.fromCharCode,L=s.length;"
            cmd +=      "var A='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';"
            cmd +=      "for(i=0;i<64;i++){"
            cmd +=          "e[A.charAt(i)]=i;"
            cmd +=      "};"
            cmd +=      "for(x=0;x<L;x++){"
            cmd +=          "c=e[s.charAt(x)];b=(b<<6)+c;l+=6;"
            cmd +=          "while(l>=8){"
            cmd +=              "((a=(b>>>(l-=8))&0xff)||(x<(L-2)))&&(r+=w(a));"
            cmd +=          "}"
            cmd +=      "};"
            cmd +=      "return r;"
            cmd +=  "};"

            # Invoke command
            cmd += "eval(r(d('%s'),d('%s')));" % (
                base64.b64encode(key).decode(),
                base64.b64encode(encrypted).decode(),
                )

            yield cmd.encode()
