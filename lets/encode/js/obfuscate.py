from lets.__module__ import Module, Container, Mount, TestCase
import random


# https://github.com/javascript-obfuscator/javascript-obfuscator
class Obfuscate(Module):
    """
    Obfuscate the supplied javascript.
    """
    images = [
        "local/javascript-obfuscator:1.0.0",    # Cross-platform
        ]

    @classmethod
    def add_arguments(cls, parser):
        parser.add_argument("-r", "--rename", action="store_true",
            help="rename variables")
        parser.add_argument("-e", "--encrypt", action="store_true",
            help="encrypt strings")
        parser.add_argument("-s", "--split", type=int, default=0,
            help="split strings at length")
        parser.add_argument("-p", "--pretty", action="store_true",
            help="don't minimize output")

    def handle(self, input, rename=False, encrypt=False, split=0, pretty=False):
        assert input is not None, "Must provide javascript as input"

        for data in input:
        
            with Mount("/data") as mount:
            
                # Write javascript input
                with mount.open("input.js", "wb") as f:
                    f.write(data)
       
                # Construct command
                cmd  = "javascript-obfuscator"
                cmd += " /data/input.js"
                cmd += " -o /data/output.js"
                cmd += " --log true"
                cmd += " --compact false" if pretty else " --compact true"
                
                # Handle variables
                cmd += " --identifier-names-generator mangled-shuffled"
                if rename:
                    cmd += " --rename-globals true"

                # Handle numbers
                cmd += " --numbers-to-expressions true"

                # Handle strings
                if split > 0:
                    cmd += " --split-strings true"
                    cmd += " --split-strings-chunk-length %i" % split
                else:
                    cmd += " --split-strings false"
                cmd += " --string-array true"
                cmd += " --string-array-threshold 1"
                cmd += " --shuffle-string-array true"
                if random.choice([True, False]):
                    cmd += " --string-array-wrappers-type function"
                    cmd += " --string-array-wrappers-chained-calls true"
                    cmd += " --string-array-wrappers-count %i" % random.randint(2,4)
                    cmd += " --string-array-wrappers-parameters-max-count %i" % random.randint(2,4)
                else:
                    cmd += " --string-array-wrappers-type variable"
                    cmd += " --string-array-wrappers-chained-calls true"
                    cmd += " --string-array-wrappers-count 1"
                    cmd += " --string-array-wrappers-parameters-max-count %i" % random.randint(2,4)
                if encrypt:
                    cmd += " --string-array-encoding rc4"

                # Handle objects
                cmd += " --transform-object-keys true"

                # Launch obfuscator
                with Container.run("local/javascript-obfuscator:1.0.0",
                    network_disabled=True,
                    volumes=mount.volumes,
                    command=cmd) as container:

                    for log in container.logs(stream=True, follow=True):
                        self.log.logger.debug(log.strip().decode())

                # Fetch obfuscated output
                with mount.open("output.js", "rb") as f:
                    yield f.read()


class ObfuscateTestCase(TestCase):
    images = [
        "local/javascript-obfuscator:1.0.0",    # Cross-platform
        ]

    def test_images(self):
        """
        Test that required images work on the given architecture.
        """
        import platform
        output = b""
        image = "local/javascript-obfuscator:1.0.0"
        with Container.run(image, command="javascript-obfuscator -h") as container:
            output = container.output()

        self.assertRegex(output, b"Usage:",
            "Image (%s) failed for architecture: %s" % (image, platform.machine()))
