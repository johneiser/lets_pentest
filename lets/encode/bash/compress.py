from lets.__module__ import Module, Container, TestCase
import base64, gzip


class Compress(Module):
    """
    Compress and Base64 encode a bash script and prepend a decode stub.
    """

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("-s", "--shell", type=str,
            help="use a specific shell (%(default)s)", default="/bin/bash")

    def handle(self, input, shell="/bin/bash"):
        for data in input:

            self.log.debug("Compressing %i bytes", len(data))
            compressed = gzip.compress(data, compresslevel=9)
            
            self.log.debug("Base64 encoding %i bytes", len(compressed))
            encoded = base64.b64encode(compressed)
            
            self.log.debug("Wrapping %i bytes", len(encoded))
            cmd = "echo '%s'|base64 -d|gzip -cfd9|%s" % (encoded.decode(), shell)
            yield cmd.encode()


class CompressTests(TestCase):
    images = ["debian:latest"]

    def test_bash(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "echo '%s'" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("debian:latest",
            network_disabled=True,
            entrypoint=["/bin/bash", "-c"],
            command=[cmd]) as container:
            
            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Bash execution produced inaccurate results")
