from lets.__module__ import Module, Mount, Container, TestCase


class Obfuscate(Module):
    """
    Obfuscate a powershell script with various string replacements.
    """
    images = [
        "local/invoke-obfuscation:1.0.0",   # cross-platform
        ]

    @classmethod
    def add_arguments(self, parser):
        pass

    def handle(self, input):
        assert input is not None, "Must provide powershell as input"

        for data in input:
            with Mount("/data") as mount:

                # Write input
                with mount.open("input", "wb") as f:
                    f.write(data)

                # Customize obfuscation (
                obf = ",".join([
                    "TOKEN",
                    "STRING,2,BACK",
                    "COMMAND,1,BACK",
                    "ARGUMENT,2,BACK",
                    "MEMBER,2,BACK",
                    #"VARIABLE,1,BACK",     # Sometimes breaks
                    #"TYPE,2,BACK",         # Sometimes breaks
                    "COMMENT,1,BACK",
                    #"WHITESPACE,1,BACK",   # Sometimes breaks
                ])

                # Construct command
                cmd = " ".join([
                    "Invoke-Obfuscation",
                    "-Quiet",
                    "-ScriptPath /data/input",
                    "-Command '%s'" % obf,
                    "| Out-File /data/output",
                    ])

                # Launch obfuscator
                with Container.run("local/invoke-obfuscation:1.0.0",
                    network_disabled=True,
                    volumes=mount.volumes,
                    entrypoint=["pwsh", "-c"],
                    command=[cmd]) as container:
                    
                    #container.wait()
                    for log in container.logs(stream=True, follow=True):
                        self.log.logger.debug(log.strip().decode())

                # Fetch output
                with mount.open("output", "rb") as f:
                    yield f.read()


class ObfuscateTestCase(TestCase):
    images = [
        "local/invoke-obfuscation:1.0.0",   # cross-platform
        ]

    def test_images(self):
        """
        Test that requiredi mages work on the given architecture.
        """
        import platform
        output = b""
        image = "local/invoke-obfuscation:1.0.0"
        with Container.run(image,
            entrypoint=["pwsh", "-c"],
            command=["Get-Help"]) as container:
            output = container.output()

        self.assertRegex(output, b"PowerShell Help System",
            "Image (%s) failed for architecture: %s" % (image, platform.machine()))
