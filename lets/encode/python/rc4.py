from lets.__module__ import Module, Container, TestCase
import base64, zlib, os
from Cryptodome.Cipher import ARC4
from Cryptodome.Hash import SHA256

class RC4(Module):
    """
    Compress, RC4 encrypt and Base64 encode a python script and prepend a decode stub.
    """

    def handle(self, input):
        for data in input:
            key = os.urandom(32)

            self.log.debug("Compressing %i bytes", len(data))
            compressed = zlib.compress(data, 9)

            self.log.debug("Encrypting %i bytes with key: 0x%s", len(compressed), key.hex())
            encrypted = ARC4.new(key).encrypt(compressed)

            self.log.debug("Base64 encoding %i bytes", len(encrypted))
            encoded = base64.b64encode(encrypted)

            #   def rc4(d,k):
            #       """
            #       Encrypt/Decrypt an array of bytes using RC4.
            #
            #       :param int[] d: Data to encrypt/decrypt
            #       :param int[] k: Key to use for encryption/decryption
            #       :return: Encrypted data
            #       :rtype: int[]
            #       """
            rc4 = b"""S,j,o=list(range(256)),0,[]
for i in list(range(256)):
    j=(j+S[i]+k[i%len(k)])%256
    S[i],S[j]=S[j],S[i]
i=j=0
for b in d:
    i=(i+1)%256
    j=(j+S[i])%256
    S[i],S[j]=S[j],S[i]
    K=S[(S[i]+S[j])%256]
    o.append(b^K)"""

            self.log.debug("Wrapping %i bytes", len(encoded))
            cmd  = "import base64,sys,zlib;"
            cmd += "f={2:ord,3:int}[sys.version_info[0]];"
            cmd += "v={"
            cmd += "'d':[f(_) for _ in base64.b64decode('%s')]," % encoded.decode()
            cmd += "'k':[f(_) for _ in base64.b64decode('%s')]," % base64.b64encode(key).decode()
            cmd += "};"
            cmd += "exec(base64.b64decode('%s'),globals(),v);" % base64.b64encode(rc4).decode()
            cmd += "exec(zlib.decompress(bytes(bytearray(v.get('o')))));"
            yield cmd.encode()


class RC4Tests(TestCase):
    images = ["python:2", "python:3"]

    def test_python_2(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print '%s'" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:2",
            network_disabled=True,
            entrypoint=["python", "-c"],
            command=[cmd]) as container:

            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Python 2 execution produced inaccurate results")
    
    def test_python_3(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print('%s')" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:3",
            network_disabled=True,
            entrypoint=["python", "-c"],
            command=[cmd]) as container:

            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Python 3 execution produced inaccurate results")


