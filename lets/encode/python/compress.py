from lets.__module__ import Module, Container, TestCase
import base64, zlib


class Compress(Module):
    """
    Compress and Base64 encode a python script and prepend a decode stub.
    """

    def handle(self, input):
        for data in input:
            compressed = zlib.compress(data, 9)
            encoded = base64.b64encode(compressed)
            cmd  = "import base64,sys,zlib;"
            cmd += "exec(zlib.decompress(base64.b64decode('"
            cmd += encoded.decode()
            cmd += "')))"
            yield cmd.encode()


class CompressTests(TestCase):
    images = ["python:2", "python:3"]
    
    def test_python_2(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print('%s')" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:2",
            network_disabled=True,
            entrypoint=["python", "-c"],
            command=[cmd]) as container:

            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Python 2 execution produced inaccurate results")

    def test_python_3(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print('%s')" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:3",
            network_disabled=True,
            entrypoint=["python", "-c"],
            command=[cmd]) as container:

            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Python 3 execution produced inaccurate results")
