from lets.__module__ import Module, Container, TestCase
import base64


class Base64(Module):
    """
    Base64 encode a python script into a python command.
    """

    def handle(self, input):
        for data in input:

            self.log.debug("Base64 encoding %i bytes", len(data))
            encoded = base64.b64encode(data)

            self.log.debug("Wrapping %i bytes", len(encoded))
            cmd  = "import base64;"
            cmd += "exec(base64.b64decode('"
            cmd += encoded.decode()
            cmd += "'))"
            yield cmd.encode()


class Base64Tests(TestCase):
    images = ["python:2", "python:3"]

    def test_python_2(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print '%s'" % test
        result = self.module(statement.encode())
        cmd = result.decode()
        
        with Container.run("python:2",
            network_disabled=True,
            entrypoint=["python", "-c"],
            command=[cmd]) as container:
            
            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Python 2 execution produced inaccurate results")
    
    def test_python_3(self):
        import string
        test = string.ascii_letters + string.digits
        statement = "print('%s')" % test
        result = self.module(statement.encode())
        cmd = result.decode()

        with Container.run("python:3",
            network_disabled=True,
            entrypoint=["python", "-c"],
            command=[cmd]) as container:

            out = container.output()

        self.assertEqual(
            out.strip(),
            test.encode(),
            "Python 3 execution produced inaccurate results")
