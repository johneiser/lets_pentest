from lets.__module__ import Module, Mount, Container, TestCase


class Msfvenom(Module):
    """
    Generate Metasploit payloads with msvenom.
    """
    images = [
        "local/metasploit:1.0.0",   # amd64 only!
        ]

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("-a", "--architecture", type=str,
            help="specify payload architecture")
        parser.add_argument("--platform", type=str,
            help="specify payload platform")
        parser.add_argument("-p", "--payload", type=str,
            help="specify payload")
        parser.add_argument("-f", "--format", type=str,
            help="specify payload format")
        parser.add_argument("opts", nargs="*", type=str,
            help="specify payload options (KEY=VALUE)")

    def run(self, command, volumes, entrypoint="msfvenom"):

        # Launch msfvenom
        with Container.run("local/metasploit:1.0.0",
            network="host",     # Use host network to enable local database
            volumes=volumes,
            entrypoint=entrypoint,
            command=command) as container:

            # Print logs, if requested
            for log in container.logs(stream=True, follow=True):
                self.log.logger.debug(log.strip().decode())
       
    def run_command(self, command, data=None, volumes=None):

        with Mount("/data") as mount:
            
            # Write any input data
            if data:
                with mount.open("input", "wb") as f:
                    f.write(data)

            # Prepare output
            command += " -o /data/output"

            # Merge volumes
            volumes = volumes or {}
            volumes.update(mount.volumes)
            
            # Run command
            self.run(command, volumes)

            # Retrieve output
            try:
                with mount.open("output", "rb") as f:
                    return f.read()
            except FileNotFoundError:
                pass

        return b""

    def run_formatter(self, format, data):

        return self.run_command(" ".join([
            "-p generic/custom",
            "-f %s" % format,
            " PAYLOADFILE=/data/input",
            ]), data)

    def run_encoder(self, encoder, data):

        return self.run_command(" ".join([
            "-p generic/custom",
            "-e %s" % encoder,
            " PAYLOADFILE=/data/input",
            ]), data)
    
    def run_custom_encoder(self, source, data=None):
        
        with Mount("/root/.msf4/modules/encoders") as mount:
            with mount.open("custom.rb", "w") as f:
                f.write(source)

            return self.run_command(" ".join([
                "-p generic/custom",
                "-e custom",
                "PAYLOADFILE=/data/input" if data else "",
                ]), data, mount.volumes)

    def handle(self, input, architecture=None, platform=None, payload=None, format=None, opts=None):

        for data in input or [None]:

            # Construct command
            cmd  = ""
            if architecture:    cmd += " -a %s" % architecture
            if platform:        cmd += " --platform %s" % platform
            if payload:         cmd += " -p %s" % payload
            if format:          cmd += " -f %s" % format
            if opts:
                for opt in opts:
                    cmd += " %s" % opt

            # Run command with data
            yield self.run_command(cmd, data)


import platform, unittest, string
arch = platform.machine()
@unittest.skipIf(arch not in ["x86_64"], "architecture no compatible: %s" % arch)
class MsfvenomTestCase(TestCase):
    images = [
        "local/metasploit:1.0.0",   # amd64 only!
        ]

    def test_images(self):
        """
        Test that required images work on the given architecture.
        """
        output = b""
        image = "local/metasploit:1.0.0"
        with Container.run(image, command="msfvenom -h") as container:
            output = container.output()

        self.assertRegex(output, b"Usage:",
            "Image (%s) failed for architecture: %s" % (image, platform.machine()))

    def test_run_formatter(self):
        """
        Test the helper function `run_formatter`.
        """
        import base64
        data = bytes(range(0,256))
        output = self.module.run_formatter("base64", data)
        self.assertEqual(output, base64.b64encode(data),
            "Formatter failed to produce accurate results")

    def test_run_encoder(self):
        """
        Test the helper function `run_encoder`.
        """
        data = bytes(range(0,256))
        output = self.module.run_encoder("generic/eicar", data)
        self.assertRegex(output, b"EICAR",
            "Encoder failed to produce accurate results")

    def test_run_custom_encoder(self):
        """
        Test the helper function `run_custom_encoder`.
        """
        data = bytes(range(0,256))
        prefix = string.ascii_letters + string.digits
        source = """
class MetasploitModule < Msf::Encoder
    Rank = ManualRanking

    def initialize
        super(
            'Arch'          => ARCH_ALL,
            'EncoderType'   => Msf::Encoder::Type::Unspecified)
    end

    def encode_block(state, block)
        return "%s" + block
    end
end
""" % prefix
        output = self.module.run_custom_encoder(source, data)
        self.assertEqual(output, prefix.encode() + data,
            "Custom encoder failed to produce accurate results")
