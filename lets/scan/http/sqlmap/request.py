from lets.__module__ import Module, Container, Mount


class URL(Module):
    """
    Scan an HTTP resource for SQL injection according to the provided request template.
    """
    images = [
        "local/sqlmap:1.0.0",       # Cross-platform
        ]

    @classmethod
    def add_arguments(cls, parser):
        parser.add_argument("-p", "--proxy", type=str, help="use a proxy to connect")
        parser.add_argument("-q", "--quiet", action="store_true", help="limit network activity")
        parser.add_argument("--delay", type=int, help="delay in seconds between each HTTP request")
        parser.add_argument("--timeout", type=int, default=30,
            help="seconds to wait before timeout connection (%(default)i)")
        parser.add_argument("--useragent", type=str, help="use specific useragent")
        parser.add_argument("--default", action="store_true", help="use defaults")
        parser.add_argument("--check-tor", action="store_true",
            help="if proxy is tor, confirm it is working properly")

    def handle(self, input, proxy=None, quiet=False, delay=None, timeout=30, useragent=None, default=False, check_tor=False):
        assert input is not None, "Must provide template request as input"

        with Mount("/data") as mount:
            
            # Retrieve request
            for request in input:

                # Write request to list
                self.log.debug("Loading request (%i bytes)", len(request))
                with mount.open("request.txt", "wb") as f:
                    f.write(request)

                # Construct command
                cmd  = "sqlmap"
                cmd += " -r /data/request.txt"  # Supply request as template file
                cmd += " --timeout %i" % timeout

                if quiet:
                    cmd += " --smart"
                    cmd += " --skip-static"
                    cmd += " --keep-alive"
                    cmd += " --level 1"
                    cmd += " --risk 1"
                else:
                    cmd += " --level 3"
                    cmd += " --risk 2"
            
                if useragent:
                    cmd += " --user-agent '%s'" % useragent
                else:
                    cmd += " --random-agent"

                if default:     cmd += " --batch"
                if proxy:       cmd += " --proxy '%s'" % proxy
                if check_tor:   cmd += " --check-tor"

                # Launch scan
                with Container.run("local/sqlmap:1.0.0",
                    network="host",     # Use host network to allow local addresses
                    volumes=mount.volumes,
                    tty=True,
                    stdin_open=True,
                    command=cmd) as container:

                    container.interact()
