from lets.__module__ import Module, Mount, Container, TestCase


class Version(Module):
    """
    Scan an HTTP endpoint and determine its software version (provide HTTP endpoints as input).
    """
    images = [
        "local/whatweb",    # Cross-platform
        ]

    # Default user agent
    useragent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"

    @classmethod
    def add_arguments(cls, parser):
        parser.add_argument("-u", "--useragent", type=str,
            help="use specific useragent (%(default)s)", default=cls.useragent)
        parser.add_argument("-a", "--auth", type=str,
            help="use HTTP basic authentication (user:password)")
        parser.add_argument("-c", "--cookie", type=str,
            help="use specific cookies (name=value; name2=value2)")
        parser.add_argument("-p", "--proxy", type=str,
            help="use HTTP proxy to connect to target (ip:port)")

    def handle(self, input, useragent=None, auth=None, cookie=None, proxy=None):
        assert input is not None, "Must provide HTTP endpoint(s) as input"

        with Mount("/data") as mount:
            
            # Open scanner and wait for commands
            self.log.debug("Opening scanner")
            with Container.run("local/whatweb",
                network="host",     # Use host network to allow local addresses
                volumes=mount.volumes,
                entrypoint=["/bin/sh", "-c"],
                command=["while true;do sleep 10; done"]) as container:

                # Retrieve HTTP endpoints
                for data in input:

                    # Write HTTP endpoints to list
                    self.log.debug("Loading %i endpoints", len(data.split()))
                    with mount.open("list.txt", "wb") as f:
                        f.write(data)

                    # Construct command
                    cmd = "whatweb -a3 -i /data/list.txt"

                    if useragent:
                        self.log.debug("Using useragent: %s", useragent)
                        if "'" in useragent:
                            self.log.warning("Be careful with single quotes in useragent (command wraps useragent with single quotes)")
                    cmd += " --user-agent '%s'" % (useragent or self.useragent)

                    if auth:
                        self.log.debug("Using HTTP basic authentication: %s", auth)
                        cmd += " --user '%s'" % auth
                    
                    if cookie:
                        self.log.debug("Using cookie: %s", cookie)
                        cmd += " --cookie '%s'" % cookie

                    if proxy:
                        if "://" in proxy:
                            [proto,_,proxy] = proxy.partition("://")
                            assert proto.startswith("http"), "Expecting HTTP proxy"
                        self.log.debug("Using HTTP proxy (%s)", proxy)
                        cmd += " --proxy '%s'" % proxy

                    # Execute scan
                    code, result = container.exec_run(cmd)
                    if code == 0:
                        yield result
                    else:
                        self.log.warn("Scan failed: %s", result)
                        continue

