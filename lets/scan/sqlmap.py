from lets.__module__ import Module, Container, Mount, TestCase
import argparse


class SQLMap(Module):
    """
    Scan an HTTP resource for SQL injection with SQLMap
        - input available at /data/input
        - requires two '--' before SQLMap commands

    Example:
    > lets scan/sqlmap -- -- -u https://[target] --forms
    """
    images = ["local/sqlmap"]

    @classmethod
    def add_arguments(cls, parser):
        parser.add_argument("command", nargs="*", help="command(s) to provide sqlmap")

    def handle(self, input, command=None):

        for data in input or [None]:
            
            # Write input data, if provided
            with Mount("/data") as mount:
                if data:
                    with mount.open("input", "wb") as f:
                        f.write(data)

                # Launch SQLMap
                with Container.run("local/sqlmap",
                    network="host",     # Use host network to allow local addresses
                    volumes=mount.volumes,
                    tty=True,
                    stdin_open=True,
                    entrypoint="sqlmap",
                    command=command) as container:
                    
                    # Print any missed logs
                    self.log.logger.info(container.logs().decode())

                    container.interact()

        # Return an empty generator
        return iter(())


class SQLMapTestCase(TestCase):
    images = ["local/sqlmap"]

    def test_images(self):
        """
        Test that required images work on the given architecture.
        """
        import platform

        output = b""
        image = "local/sqlmap"
        with Container.run(image, entrypoint="sqlmap", command="-h") as container:
            output = container.output()

        self.assertRegex(output, b"Usage:",
            "Image (%s) failed for architecture: %s" % (image, platform.machine()))
