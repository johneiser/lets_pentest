from lets.__module__ import Module, Mount, Container, TestCase
import os


class Dnscat2(Module):
    """
    Launch a Dnscat2 server.
    """
    images = [
        "local/dnscat2:1.0.0",      # amd64 only!
        ]

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("domains", type=str, nargs="*",
            help="domain(s) to listen for")
        parser.add_argument("-p", "--port", type=int, default=53,
            help="port to listen on")
        parser.add_argument("--interface", type=str, default="0.0.0.0",
            help="interface to listen on")
        parser.add_argument("-d", "--directory", type=str, action="append",
            help="share a directory")

    def handle(self, input, domains=None, port=53, interface="0.0.0.0", directory=None):

        for data in input or [None]:
            with Mount("/data") as mount:

                # Construct command
                cmd  = "ruby ./dnscat2.rb"
                cmd += " --dns host=%s,port=%i" % (interface, port)
                if domains:
                    if not isinstance(domains, list):
                        domains = [domains]
                    for d in domains:
                        cmd += ",domain=%s" % d

                # Merge volumes
                volumes = mount.volumes
                if directory:
                    if not isinstance(directory, list):
                        directory = [directory]
                    for d in directory:
                        d = os.path.abspath(d)
                        self.log.debug("Sharing directory: %s", d)
                        volumes[d] = {
                            "bind" : d,
                            "mode" : "rw",
                            }

                # Launch metasploit
                with Container.run("local/dnscat2:1.0.0",
                    stdin_open=True,
                    tty=True,
                    network="host",
                    volumes=volumes,
                    command=cmd) as container:

                    container.interact()


import platform, unittest, string
arch = platform.machine()
@unittest.skipIf(arch not in ["x86_64"], "architecture not compatible: %s" % arch)
class Dnscat2TestCase(TestCase):
    images = [
        "local/dnscat2:1.0.0",  # amd64 only!
        ]

    def test_images(self):
        """
        Test that required images work on the given architecture.
        """
        output = b""
        image = "local/dnscat2:1.0.0"
        with Container.run(image, command="ruby ./dnscat2.rb --help") as container:
            output = container.output()

        self.assertRegex(output, b"Start a DNS server",
            "Image (%s) failed for architecture: %s" % (image, platform.machine()))
