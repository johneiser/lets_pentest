from lets.__module__ import Module, Mount, Container
import os


class Metasploit(Module):
    """
    Launch the Metasploit console.
    """
    images = [
        "local/metasploit:1.0.0",      # amd64 only!
        ]

    @classmethod
    def add_arguments(self, parser):
        parser.add_argument("-d", "--directory", type=str, action="append",
            help="share a directory")

    def handle(self, input, directory=None):

        for data in input or [None]:
            with Mount("/data") as mount:

                # Write resource script, if provided
                if data:
                    self.log.debug("Processing input script")
                    with mount.open("input.txt", "wb") as f:
                        f.write(data)

                # Construct command
                cmd  = "msfconsole"
                if data:
                    cmd += " -r /data/input.txt"

                # Merge volumes
                volumes = mount.volumes
                if directory:
                    if not isinstance(directory, list):
                        directory = [directory]
                    for d in directory:
                        d = os.path.abspath(d)
                        self.log.debug("Sharing directory: %s", d)
                        volumes[d] = {
                            "bind" : d,
                            "mode" : "rw",
                            }

                # Launch metasploit
                with Container.run("local/metasploit:1.0.0",
                    stdin_open=True,
                    tty=True,
                    network="host",
                    volumes=volumes,
                    command=cmd) as container:

                    container.interact()
